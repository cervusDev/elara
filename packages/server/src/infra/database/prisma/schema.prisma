generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  name     String
  email    String @unique
  password String

  deletedAt DateTime?
  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())

  UserRole       UsersRole[]
  UserPermission UsersPermission[]
  @@map("users")
}

model Permission {
  id Int @id @default(autoincrement())

  read   SN
  create SN
  update SN
  delete SN

  deletedAt DateTime?
  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())

  UserPermission   UsersPermission[]
  PermissionsRoles PermissionsRoles[]
  @@map("permissions")
}

model UsersPermission {
  id Int @id @default(autoincrement())

  userId       Int        @map("user_id")
  User         User       @relation(fields: [userId], references: [id])
  permissionId Int        @map("permission_id")
  Permission   Permission @relation(fields: [permissionId], references: [id])

  @@map("user_permissions")
}

model Role {
  id          Int    @id @default(autoincrement())

  name        String
  description String

  deletedAt DateTime?
  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())

  UserRole         UsersRole[]
  PermissionsRoles PermissionsRoles[]

  @@map("roles")
}

model UsersRole {
  id     Int  @id @default(autoincrement())
  userId Int  @map("user_id")
  User   User @relation(fields: [userId], references: [id])
  roleId Int  @map("role_id")
  Role   Role @relation(fields: [roleId], references: [id])

  @@map("user_roles")
}

model PermissionsRoles {
  id           Int        @id @default(autoincrement())
  
  roleId       Int        @map("role_id")
  Role         Role       @relation(fields: [roleId], references: [id])
  permissionId Int        @map("permission_id")
  Permission   Permission @relation(fields: [permissionId], references: [id])

  @@map("permission_roles")
}

// Enuns

enum SN {
  S
  N
}
